/*
 * HamsterAPIClientSimpleBehaviourExample.cpp
 *
 *  Created on: Aug 10, 2016
 *      Author: ofir
 */

#include <HamsterAPIClientCPP/Hamster.h>

HamsterAPI::Hamster * hamster;
xcx
void getScansBetween(double min, double max, std::vector<double> & distances)
{
	HamsterAPI::LidarScan scan = hamster->getLidarScan();

	for(size_t i=0;i<scan.getScanSize();i++)
	{
		double degree = scan.getScanAngleIncrement()*i;
		if(degree >= min && degree <= max)
			distances.push_back(scan.getDistance(i));
	}
}

bool willCollide(std::vector<double> distances, int angle_from_center)
{
	HamsterAPI::LidarScan scan = hamster->getLidarScan();

	int collisions = 0;

	for(size_t i=distances.size()/2 - angle_from_center/2;i<distances.size()/2+angle_from_center/2;i++)
		if(distances[i] < scan.getMaxRange()/4.0)
			collisions++;

	return collisions >= angle_from_center/4.0;
}

bool isFrontFree()
{
	// Degrees : [90, 270]

	std::vector<double> distances;

	getScansBetween(90, 270, distances);

	return !willCollide(distances,40);
}

bool isLeftFree()
{
	// Degrees : [180,360]

	std::vector<double> distances;

	getScansBetween(180, 360, distances);

	return !willCollide(distances,40);
}

bool isRightFree()
{
	// Degrees : [0, 180]

	std::vector<double> distances;

	getScansBetween(0, 180, distances);

	return !willCollide(distances,40);
}

bool isBackFree()
{
	// Degrees : [270,360], [0, 90]

	std::vector<double> distances;

	getScansBetween(270, 360, distances);
	getScansBetween(0, 90, distances);

	return !willCollide(distances,40);
}

void moveForward()
{
	HamsterAPI::Log::i("Client", "Moving Forward");
	hamster->sendSpeed(0.4,0.0);
}

void turnLeft()
{
	HamsterAPI::Log::i("Client", "Turning Left");
	while(!isFrontFree())
		hamster->sendSpeed(0.04, 45.0);
}

void turnRight()
{
	HamsterAPI::Log::i("Client", "Turning Right");
	while(!isFrontFree())
		hamster->sendSpeed(0.04, -45.0);
}

void moveBackwards()
{
	HamsterAPI::Log::i("Client", "Moving Backwards");
	while(!isLeftFree() && !isRightFree() && isBackFree())
		hamster->sendSpeed(-0.4,0.0);
	if(isLeftFree())
		turnLeft();
	else
		turnRight();
}

void stopMoving()
{
	hamster->sendSpeed(0.0,0.0);
}

int main(int argc, char ** argv)
{
	try
	{
		hamster = new HamsterAPI::Hamster(1);
		while(hamster->isConnected())
		{
			try
			{
				if(isFrontFree())
					moveForward();
				else
				{
					stopMoving();
					if(isLeftFree())
						turnLeft();
					else if(isRightFree())
						turnRight();
					else if(isBackFree())
						moveBackwards();
					else
						HamsterAPI::Log::i("Client","I am stuck!");
				}

				// Speed Getter
				// HamsterAPI::Speed speed = hamster.getSpeed();
			}
			catch(const HamsterAPI::HamsterError & message_error)
			{
				HamsterAPI::Log::i("Client",message_error.what());
			}

		}
	}
	catch(const HamsterAPI::HamsterError & connection_error)
	{
		HamsterAPI::Log::i("Client",connection_error.what());
	}
}





